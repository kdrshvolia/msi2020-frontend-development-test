{"version":3,"sources":["images/static-logo.svg","images/link.svg","images/static-logo-fav.svg","images/favorites-cross-btn.svg","images/favorites-burger-btn.svg","apiCall.js","hocs/withBoard/withBoard.js","components/Radio/StyledComponents.js","components/Radio/Radio.js","components/Button/StyledComponents.js","components/Button/Button.js","components/CategoriesList/StyledComponents.js","components/SvgIcon/SvgIcon.js","components/JokeContainer/JokeContainer.js","components/Header/Header.js","components/FavoritesHeader/StyledComponents.js","components/FavoritesHeader/FavoritesHeader.js","components/FavSideBar/FavSideBar.js","components/Board/Board.js","StyledComponents.js","App.js","serviceWorker.js"],"names":["module","exports","apiCall","url","fetch","method","then","response","json","catch","err","console","log","options","random","categories","search","RadioWrapper","styled","div","CustomRadio","input","Radio","name","value","option","checked","handleChange","onChange","useCallback","type","id","htmlFor","SearchButton","button","Button","text","onClick","CategoriesListWrapper","SvgIcon","fill","width","height","viewBox","path","JokeContainer","joke","toggleFav","isFavorited","isInFavoritedList","Header","FavoritedHeader","FavoritesHeader","children","propTypes","PropTypes","string","isRequired","FavSideBar","favoritedJokes","isSideBarOpened","length","Object","values","chosenOption","chosenCategory","getJoke","jokes","setInputText","inputText","setCategory","createGlobalStyle","App","withBoard","Board","window","location","URL","WrappedComponent","process","state","JSON","parse","localStorage","getItem","showCategories","favJoke","find","updatedFavoritedJokes","setState","setItem","stringify","setType","category","setOpened","getCategories","data","slice","result","this","React","Component","config","registration","onUpdate"],"mappings":"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","file":"static/js/main.76c00d17.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/static-logo.ded38f2d.svg\";","module.exports = __webpack_public_path__ + \"static/media/link.0f10cee4.svg\";","module.exports = __webpack_public_path__ + \"static/media/static-logo-fav.2ebc560c.svg\";","module.exports = __webpack_public_path__ + \"static/media/favorites-cross-btn.889f54a4.svg\";","module.exports = __webpack_public_path__ + \"static/media/favorites-burger-btn.ffa892cb.svg\";","const apiCall = (url) => {\r  return fetch(url, { method: 'GET' })\r    .then((response) => response.json())\r    .catch((err) => console.log(err));\r};\r\rexport default apiCall;\r","import React from 'react';\r\nimport apiCall from '../../apiCall';\r\n\r\nconst options = {\r\n  random: 'random',\r\n  categories: 'categories',\r\n  search: 'search',\r\n};\r\n\r\nconst withBoard = (WrappedComponent) => {\r\n  return class extends React.Component {\r\n    state = {\r\n      chosenOption: options.random,\r\n      chosenCategory: '',\r\n      jokes: [],\r\n      favoritedJokes: JSON.parse(localStorage.getItem('favorites')) || {},\r\n      categories: [],\r\n      showCategories: 4,\r\n      inputText: '',\r\n      isSideBarOpened: false,\r\n    };\r\n\r\n    componentDidMount() {\r\n      this.getCategories();\r\n    }\r\n\r\n    toggleFav = (id) => {\r\n      const { jokes, favoritedJokes } = this.state;\r\n      const favJoke = jokes.find((joke) => joke.id === id);\r\n      if (favoritedJokes[id]) {\r\n        const { [id]: omit, ...updatedFavoritedJokes } = favoritedJokes;\r\n        this.setState(\r\n          {\r\n            favoritedJokes: updatedFavoritedJokes,\r\n          },\r\n          () => localStorage.setItem('favorites', JSON.stringify(this.state.favoritedJokes)),\r\n        );\r\n      } else {\r\n        this.setState(\r\n          (state) => {\r\n            return { favoritedJokes: { ...state.favoritedJokes, [id]: favJoke } };\r\n          },\r\n          () => localStorage.setItem('favorites', JSON.stringify(this.state.favoritedJokes)),\r\n        );\r\n      }\r\n    };\r\n\r\n    setType = (option) => {\r\n      this.setState({\r\n        chosenOption: option,\r\n      });\r\n    };\r\n\r\n    setCategory = (category) => {\r\n      this.setState({\r\n        chosenCategory: category,\r\n      });\r\n    };\r\n\r\n    setInputText = (text) => {\r\n      this.setState({\r\n        inputText: text,\r\n      });\r\n    };\r\n\r\n    setOpened = () => {\r\n      const { isSideBarOpened } = this.state;\r\n      this.setState({\r\n        isSideBarOpened: !isSideBarOpened,\r\n      });\r\n    };\r\n\r\n    getCategories = () => {\r\n      const { categories, showCategories } = this.state;\r\n      apiCall('https://api.chucknorris.io/jokes/categories').then((data) => {\r\n        this.setState(\r\n          {\r\n            categories: [...categories, ...data.slice(0, showCategories)],\r\n          },\r\n          () =>\r\n            this.setState({\r\n              chosenCategory: this.state.categories[0],\r\n            }),\r\n        );\r\n      });\r\n    };\r\n\r\n    getJoke = () => {\r\n      const { chosenOption, chosenCategory, jokes } = this.state;\r\n      if (chosenOption === options.categories) {\r\n        apiCall(`https://api.chucknorris.io/jokes/random?category=${chosenCategory}`).then(\r\n          (data) => {\r\n            this.setState({\r\n              jokes: [...jokes, data],\r\n            });\r\n          },\r\n        );\r\n      } else if (chosenOption === options.random) {\r\n        apiCall(`https://api.chucknorris.io/jokes/random`).then((data) => {\r\n          this.setState({\r\n            jokes: [...jokes, data],\r\n          });\r\n        });\r\n      } else if (chosenOption === options.search) {\r\n        const { inputText } = this.state;\r\n        apiCall(`https://api.chucknorris.io/jokes/search?query=${inputText}`).then((data) => {\r\n          this.setState({\r\n            jokes: [...jokes, ...data.result],\r\n          });\r\n        });\r\n      }\r\n    };\r\n\r\n    render() {\r\n      const {\r\n        chosenOption,\r\n        chosenCategory,\r\n        categories,\r\n        jokes,\r\n        favoritedJokes,\r\n        isSideBarOpened,\r\n        inputText,\r\n      } = this.state;\r\n      return (\r\n        <WrappedComponent\r\n          toggleFav={this.toggleFav}\r\n          inputText={inputText}\r\n          setInputText={this.setInputText}\r\n          options={options}\r\n          setType={this.setType}\r\n          setCategory={this.setCategory}\r\n          chosenOption={chosenOption}\r\n          chosenCategory={chosenCategory}\r\n          getJoke={this.getJoke}\r\n          jokes={jokes}\r\n          favoritedJokes={favoritedJokes}\r\n          categories={categories}\r\n          isSideBarOpened={isSideBarOpened}\r\n          setOpened={this.setOpened}\r\n        />\r\n      );\r\n    }\r\n  };\r\n};\r\n\r\nexport { withBoard };\r\n","import styled, { css } from 'styled-components';\r\n\r\nconst RadioWrapper = styled.div`\r\n  padding: 10px 0;\r\n`;\r\n\r\nconst CustomRadio = styled.input`\r\n  &:checked,\r\n  &:not(:checked) {\r\n    position: absolute;\r\n    left: -9999px;\r\n  }\r\n  &:checked + label,\r\n  &:not(:checked) + label {\r\n    position: relative;\r\n    padding-left: 28px;\r\n    cursor: pointer;\r\n    line-height: 20px;\r\n    display: inline-block;\r\n  }\r\n  &:not(:checked) + label:before {\r\n    content: '';\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    width: 20px;\r\n    height: 20px;\r\n    border: 2px solid #ababab;\r\n    box-sizing: border-box;\r\n    border-radius: 100%;\r\n    background: #fff;\r\n  }\r\n\r\n  &:checked + label:before {\r\n    border: 2px solid #333333;\r\n    content: '';\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    width: 20px;\r\n    height: 20px;\r\n    box-sizing: border-box;\r\n    border-radius: 100%;\r\n    background: #fff;\r\n  }\r\n  &:checked + label:after,\r\n  &:not(:checked) + label:after {\r\n    content: '';\r\n    width: 10px;\r\n    height: 10px;\r\n    background: #333333;\r\n    position: absolute;\r\n    top: 5px;\r\n    left: 5px;\r\n    border-radius: 100%;\r\n    -webkit-transition: all 0.2s ease;\r\n    transition: all 0.2s ease;\r\n  }\r\n\r\n  &:not(:checked) + label:after {\r\n    opacity: 0;\r\n    -webkit-transform: scale(0);\r\n    transform: scale(0);\r\n  }\r\n  &:checked + label:after {\r\n    opacity: 1;\r\n    -webkit-transform: scale(1);\r\n    transform: scale(1);\r\n  }\r\n`;\r\n\r\nexport { CustomRadio, RadioWrapper };\r\n","import React, { useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CustomRadio, RadioWrapper } from './StyledComponents';\r\n\r\nconst Radio = ({ name, value, option, checked, handleChange }) => {\r\n  const onChange = useCallback(() => {\r\n    handleChange(option);\r\n  }, [option]);\r\n\r\n  return (\r\n    <RadioWrapper>\r\n      <CustomRadio type=\"radio\" name={name} id={value} checked={checked} onChange={onChange} />{' '}\r\n      <label htmlFor={value}>{value}</label>\r\n    </RadioWrapper>\r\n  );\r\n};\r\n\r\nRadio.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n  option: PropTypes.string.isRequired,\r\n  handleChange: PropTypes.func.isRequired,\r\n  checked: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default Radio;\r\n","import styled, { css } from 'styled-components';\r\n\r\nconst SearchButton = styled.button`\r\n  cursor: pointer;\r\n  width: 152px;\r\n  height: 42px;\r\n  background: linear-gradient(92.01deg, #8ea7ff 0%, #7291ff 100%);\r\n  border-radius: 10px;\r\n  font-weight: bold;\r\n  font-size: 16px;\r\n  line-height: 22px;\r\n  color: #ffffff;\r\n  border: none;\r\n`;\r\n\r\nexport { SearchButton };\r\n","import React from 'react';\rimport PropTypes from 'prop-types';\rimport { SearchButton } from './StyledComponents';\r\rconst Button = ({ text, onClick }) => {\r  const handleClick = () => {\r    onClick();\r  };\r  return (\r    <div>\r      <SearchButton type=\"button\" onClick={handleClick}>\r        {text}\r      </SearchButton>\r    </div>\r  );\r};\r\rButton.propTypes = {\r  text: PropTypes.string.isRequired,\r  onClick: PropTypes.func.isRequired,\r};\rexport default Button;\r","import styled, { css } from 'styled-components';\r\rconst CategoriesListWrapper = styled.div`\r  display: flex;\r  max-width: 370px;\r  justify-content: space-between;\r  flex-wrap: wrap;\r`;\r\r/* const CategoryItem = styled.div`\r  height: 28px;\r  border: 2px solid #f8f8f8;\r  box-sizing: border-box;\r  border-radius: 6px;\r  font-family: Roboto;\r  font-style: normal;\r  font-weight: 500;\r  font-size: 12px;\r  letter-spacing: 2px;\r  text-transform: uppercase;\r  color: #ababab;\r  padding: 6px 15px;\r  cursor: pointer;\r`; */\r\rexport { CategoriesListWrapper };\r","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst SvgIcon = ({ fill, width, height, viewBox = '0 0 20 17', path, onClick }) => (\r\n  <svg onClick={onClick} width={width} height={height} viewBox={viewBox}>\r\n    <path d={path} fill={fill} />\r\n  </svg>\r\n);\r\n\r\nSvgIcon.propTypes = {\r\n  fill: PropTypes.string.isRequired,\r\n  width: PropTypes.string.isRequired,\r\n  height: PropTypes.string.isRequired,\r\n  viewBox: PropTypes.string.isRequired,\r\n  path: PropTypes.string.isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default SvgIcon;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { calculateTimeDifference } from '../../util';\r\nimport {\r\n  JokeText,\r\n  JokeWrapper,\r\n  UpdateInfo,\r\n  Category,\r\n  JokeInfo,\r\n  Link,\r\n  Logo,\r\n  Joke,\r\n  FavoritedIcon,\r\n} from './StyledComponents';\r\nimport SvgIcon from '../SvgIcon/SvgIcon';\r\nimport StaticLogo from '../../images/static-logo.svg';\r\nimport LinkLogo from '../../images/link.svg';\r\nimport StaticLogoFav from '../../images/static-logo-fav.svg';\r\n\r\nconst JokeContainer = ({ joke, toggleFav, isFavorited, isInFavoritedList }) => {\r\n  const path = isFavorited\r\n    ? 'M18.4134 1.66367C17.3781 0.590857 15.9575 0 14.413 0C13.2585 0 12.2012 0.348712 11.2704 1.03637C10.8008 1.38348 10.3752 1.80814 10 2.3038C9.62494 1.80829 9.19922 1.38348 8.7294 1.03637C7.79877 0.348712 6.74149 0 5.58701 0C4.04251 0 2.62177 0.590857 1.58646 1.66367C0.563507 2.72395 0 4.17244 0 5.74252C0 7.35852 0.630341 8.83778 1.98364 10.3979C3.19427 11.7935 4.93423 13.2102 6.94916 14.8507C7.63718 15.411 8.41705 16.046 9.22684 16.7224C9.44077 16.9015 9.71527 17 10 17C10.2846 17 10.5592 16.9015 10.7729 16.7227C11.5826 16.0461 12.363 15.4108 13.0513 14.8503C15.0659 13.2101 16.8059 11.7935 18.0165 10.3978C19.3698 8.83778 20 7.35852 20 5.74238C20 4.17244 19.4365 2.72395 18.4134 1.66367Z'\r\n    : 'M10 17C9.71527 17 9.44077 16.9015 9.22684 16.7224C8.41888 16.0475 7.63992 15.4132 6.95267 14.8536L6.94916 14.8507C4.93423 13.2102 3.19427 11.7935 1.98364 10.3979C0.630341 8.83778 0 7.35852 0 5.74252C0 4.17244 0.563507 2.72395 1.58661 1.66367C2.62192 0.590857 4.04251 0 5.58716 0C6.74164 0 7.79892 0.348712 8.72955 1.03637C9.19922 1.38348 9.62494 1.80829 10 2.3038C10.3752 1.80829 10.8008 1.38348 11.2706 1.03637C12.2012 0.348712 13.2585 0 14.413 0C15.9575 0 17.3782 0.590857 18.4135 1.66367C19.4366 2.72395 20 4.17244 20 5.74252C20 7.35852 19.3698 8.83778 18.0165 10.3978C16.8059 11.7935 15.0661 13.2101 13.0515 14.8504C12.363 15.4108 11.5828 16.0461 10.773 16.7227C10.5592 16.9015 10.2846 17 10 17ZM5.58716 1.11932C4.37363 1.11932 3.25882 1.58203 2.44781 2.42232C1.62476 3.2753 1.17142 4.45439 1.17142 5.74252C1.17142 7.10165 1.70013 8.31719 2.88559 9.68375C4.03137 11.0047 5.73563 12.3923 7.70889 13.9989L7.71255 14.0018C8.4024 14.5635 9.18442 15.2003 9.99832 15.8802C10.8171 15.199 11.6003 14.5612 12.2916 13.9986C14.2647 12.392 15.9688 11.0047 17.1146 9.68375C18.2999 8.31719 18.8286 7.10165 18.8286 5.74252C18.8286 4.45439 18.3752 3.2753 17.5522 2.42232C16.7413 1.58203 15.6264 1.11932 14.413 1.11932C13.524 1.11932 12.7078 1.38931 11.9872 1.92171C11.3449 2.39637 10.8975 2.99642 10.6352 3.41627C10.5003 3.63217 10.2629 3.76105 10 3.76105C9.73709 3.76105 9.49966 3.63217 9.36478 3.41627C9.10263 2.99642 8.65524 2.39637 8.01285 1.92171C7.29218 1.38931 6.47598 1.11932 5.58716 1.11932Z';\r\n  const handleClick = () => {\r\n    toggleFav(joke.id);\r\n  };\r\n  return (\r\n    <JokeWrapper isInFavoritedList={isInFavoritedList}>\r\n      <FavoritedIcon>\r\n        <SvgIcon onClick={handleClick} width=\"20\" height=\"17\" path={path} fill=\"#ff6767\" />\r\n      </FavoritedIcon>\r\n      <Joke>\r\n        <Logo>\r\n          <img src={isInFavoritedList ? StaticLogoFav : StaticLogo} alt=\"\" />\r\n        </Logo>\r\n        <div>\r\n          <Link>\r\n            ID:&nbsp;\r\n            <a href={joke.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n              {joke.id}\r\n            </a>\r\n            &nbsp;\r\n            <img src={LinkLogo} alt=\"\" />\r\n          </Link>\r\n          <JokeText className=\"joke-text\">{joke.value}</JokeText>\r\n        </div>\r\n      </Joke>\r\n      <JokeInfo>\r\n        <UpdateInfo className=\"last-update\">\r\n          Last update: {calculateTimeDifference(Date.parse(joke.updated_at), new Date())} hours ago.\r\n        </UpdateInfo>\r\n        {joke.categories.length === 0 ? null : (\r\n          <Category className=\"category\">{joke.categories} </Category>\r\n        )}\r\n      </JokeInfo>\r\n    </JokeWrapper>\r\n  );\r\n};\r\n\r\nJokeContainer.propTypes = {\r\n  toggleFav: PropTypes.func.isRequired,\r\n  isFavorited: PropTypes.bool.isRequired,\r\n  joke: PropTypes.shape({\r\n    categories: PropTypes.array,\r\n    created_at: PropTypes.string.isRequired,\r\n    icon_url: PropTypes.string.isRequired,\r\n    id: PropTypes.string.isRequired,\r\n    updated_at: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n  isInFavoritedList: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default JokeContainer;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Header = ({ title, subtitle }) => {\r\n  return (\r\n    <div>\r\n      <h1>{title}</h1>\r\n      <h2>{subtitle}</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  subtitle: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Header;\r\n","import styled, { css } from 'styled-components';\r\rconst FavoritedHeader = styled.h3`\r  width: 84px;\r  font-weight: 500;\r  font-size: 20px;\r  line-height: 28px;\r  color: #ababab;\r  margin: 0;\r`;\r\rexport { FavoritedHeader };\r","import React from 'react';\rimport PropTypes from 'prop-types';\rimport { FavoritedHeader } from './StyledComponents';\r\rconst FavoritesHeader = ({ children }) => {\r  return <FavoritedHeader>{children}</FavoritedHeader>;\r};\r\rFavoritedHeader.propTypes = {\r  children: PropTypes.string.isRequired,\r};\r\rexport default FavoritesHeader;\r","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { FavoritesList } from '../Board/StyledComponents';\r\nimport JokesList from '../JokesList/JokesList';\r\n\r\nconst FavSideBar = ({ favoritedJokes, toggleFav, isFavoritedList, isSideBarOpened, setOpened }) => {\r\n  return (\r\n    <aside>\r\n      <FavoritesList isSideBarOpened={isSideBarOpened}>\r\n        {Object.keys(favoritedJokes).length === 0 ? null : (\r\n          <JokesList\r\n            jokesList={Object.values(favoritedJokes)}\r\n            toggleFav={toggleFav}\r\n            isFavoritedList={isFavoritedList}\r\n          />\r\n        )}\r\n      </FavoritesList>\r\n    </aside>\r\n  );\r\n};\r\n\r\nFavSideBar.propTypes = {\r\n  toggleFav: PropTypes.func.isRequired,\r\n  isSideBarOpened: PropTypes.bool.isRequired,\r\n  setOpened: PropTypes.func.isRequired,\r\n  isFavoritedList: PropTypes.bool.isRequired,\r\n  favoritedJokes: PropTypes.shape({\r\n    id: PropTypes.shape({\r\n      categories: PropTypes.array,\r\n      created_at: PropTypes.string.isRequired,\r\n      icon_url: PropTypes.string.isRequired,\r\n      id: PropTypes.string.isRequired,\r\n      updated_at: PropTypes.string.isRequired,\r\n      url: PropTypes.string.isRequired,\r\n      value: PropTypes.string.isRequired,\r\n    }),\r\n  }).isRequired,\r\n};\r\n\r\nexport default FavSideBar;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport SearchJokeForm from '../SearchJokeForm/SearchJokeForm';\r\nimport JokesList from '../JokesList/JokesList';\r\nimport Header from '../Header/Header';\r\nimport { BoardWrapper, Favorites, FavoritesList, Search, SideBarOverlay } from './StyledComponents';\r\nimport MainLogo from '../MainLogo/MainLogo';\r\nimport FavoritesHeader from '../FavoritesHeader/FavoritesHeader';\r\nimport FavSideBar from '../FavSideBar/FavSideBar';\r\nimport { SideBarHeader, HamburgerIcon } from '../FavSideBar/StyledComponents';\r\nimport CrossBtn from '../../images/favorites-cross-btn.svg';\r\nimport BurgerBtn from '../../images/favorites-burger-btn.svg';\r\n\r\nconst Board = ({\r\n  setInputText,\r\n  inputText,\r\n  options,\r\n  setType,\r\n  setCategory,\r\n  chosenOption,\r\n  chosenCategory,\r\n  getJoke,\r\n  categories,\r\n  jokes,\r\n  toggleFav,\r\n  favoritedJokes,\r\n  isSideBarOpened,\r\n  setOpened,\r\n}) => {\r\n  const setOpen = () => {\r\n    setOpened();\r\n  };\r\n  return (\r\n    <BoardWrapper>\r\n      <Search>\r\n        <MainLogo text=\"MSI 2020\" />\r\n        <Header title=\"Hey!\" subtitle=\"Let’s try to find a joke for you:\" />\r\n        <SearchJokeForm\r\n          setInputText={setInputText}\r\n          inputText={inputText}\r\n          options={options}\r\n          setType={setType}\r\n          chosenOption={chosenOption}\r\n          chosenCategory={chosenCategory}\r\n          getJoke={getJoke}\r\n          categories={categories}\r\n          setCategory={setCategory}\r\n        />\r\n        {jokes.length === 0 ? null : (\r\n          <JokesList\r\n            jokesList={jokes}\r\n            toggleFav={toggleFav}\r\n            favoritedJokes={favoritedJokes}\r\n            isFavoritedList={false}\r\n          />\r\n        )}\r\n      </Search>\r\n      <SideBarOverlay isSideBarOpened={isSideBarOpened} />\r\n      <Favorites>\r\n        <FavoritesHeader>Favourite</FavoritesHeader>\r\n        <FavoritesList>\r\n          {Object.keys(favoritedJokes).length === 0 ? null : (\r\n            <JokesList\r\n              jokesList={Object.values(favoritedJokes)}\r\n              toggleFav={toggleFav}\r\n              isFavoritedList\r\n            />\r\n          )}\r\n        </FavoritesList>\r\n      </Favorites>\r\n      <SideBarHeader>\r\n        {' '}\r\n        <HamburgerIcon>\r\n          <img\r\n            className=\"icon\"\r\n            src={isSideBarOpened ? CrossBtn : BurgerBtn}\r\n            alt=\"\"\r\n            onClick={setOpen}\r\n          />\r\n        </HamburgerIcon>\r\n        <FavoritesHeader>Favourite</FavoritesHeader>\r\n      </SideBarHeader>\r\n      <Favorites isSideBarOpened={isSideBarOpened}>\r\n        <FavSideBar\r\n          favoritedJokes={favoritedJokes}\r\n          toggleFav={toggleFav}\r\n          isFavoritedList\r\n          isSideBarOpened={isSideBarOpened}\r\n          setOpened={setOpened}\r\n        />\r\n      </Favorites>\r\n    </BoardWrapper>\r\n  );\r\n};\r\n\r\nBoard.propTypes = {\r\n  options: PropTypes.shape({\r\n    random: PropTypes.string.isRequired,\r\n    categories: PropTypes.string.isRequired,\r\n    search: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n  setType: PropTypes.func.isRequired,\r\n  setCategory: PropTypes.func.isRequired,\r\n  chosenOption: PropTypes.string.isRequired,\r\n  chosenCategory: PropTypes.string.isRequired,\r\n  setInputText: PropTypes.func.isRequired,\r\n  inputText: PropTypes.string.isRequired,\r\n  getJoke: PropTypes.func.isRequired,\r\n  jokes: PropTypes.string.isRequired,\r\n  categories: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  toggleFav: PropTypes.func.isRequired,\r\n  favoritedJokes: PropTypes.shape({\r\n    id: PropTypes.shape({\r\n      categories: PropTypes.array,\r\n      created_at: PropTypes.string.isRequired,\r\n      icon_url: PropTypes.string.isRequired,\r\n      id: PropTypes.string.isRequired,\r\n      updated_at: PropTypes.string.isRequired,\r\n      url: PropTypes.string.isRequired,\r\n      value: PropTypes.string.isRequired,\r\n    }),\r\n  }).isRequired,\r\n  isSideBarOpened: PropTypes.bool.isRequired,\r\n  setOpened: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Board;\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body, html {\r\n   font-family: Roboto;\r\n    font-style: normal;\r\n    font-weight: normal;\r\n    color: #333333;\r\n    height: 100%;\r\n    font-size: calc(14px + (18 - 14) * ((100vw - 300px) / (1600 - 300)));\r\n    overflow-x: hidden;\r\n  }\r\n`;\r\n\r\nexport { GlobalStyle };\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { withBoard } from './hocs/withBoard/withBoard';\r\nimport Board from './components/Board/Board';\r\nimport { GlobalStyle } from './StyledComponents';\r\n\r\nfunction App() {\r\n  const EnhancedBoard = withBoard(Board);\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <EnhancedBoard />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"],"sourceRoot":""}