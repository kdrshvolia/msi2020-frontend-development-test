import React from 'react';import { mount } from 'enzyme';import { withBoard } from './withBoard';import apiCall from '../../apiCall';jest.mock('../../apiCall');apiCall.mockImplementation(() => Promise.resolve(['1', '2']));const WrappedComponent = (props) => {  return <div />;};const EnhancedComponent = withBoard(WrappedComponent);describe('Enhanced Component', () => {  it('Passes upadted inputText prop', () => {    const wrapper = mount(<EnhancedComponent />);    wrapper.find(WrappedComponent).props().setInputText('abc');    wrapper.update();    const { inputText } = wrapper.find(WrappedComponent).props();    expect(inputText).toEqual('abc');  });  it('Component mounts and gets categories ', async () => {    const wrapper = mount(<EnhancedComponent />);    await Promise.resolve();    wrapper.update();    const { categories } = wrapper.find(WrappedComponent).props();    expect(categories).toEqual(['1', '2']);  });  it('Sets searching option', () => {    const wrapper = mount(<EnhancedComponent />);    const option = wrapper.find(WrappedComponent).props().options.categories;    wrapper.find(WrappedComponent).props().setType(option);    wrapper.update();    const { chosenOption } = wrapper.find(WrappedComponent).props();    expect(chosenOption).toEqual(option);  });  it('Gets random joke ', async () => {    const wrapper = mount(<EnhancedComponent />);    apiCall.mockImplementationOnce(() => Promise.resolve({ id: '1', value: 'abc' }));    wrapper.find(WrappedComponent).props().getJoke();    await Promise.resolve();    wrapper.update();    const { jokes } = wrapper.find(WrappedComponent).props();    expect(jokes).toEqual([{ id: '1', value: 'abc' }]);  });  it('Gets jokes by search ',  async () => {    const wrapper = mount(<EnhancedComponent />);      const data =  [          { id: '1', value: 'abc' },          { id: '2', value: 'cef' },        ];      apiCall.mockImplementationOnce( () => Promise.resolve({result: [          { id: '1', value: 'abc' },          { id: '2', value: 'cef' },        ]}),      );      const option = wrapper.find(WrappedComponent).props().options.search;      wrapper.find(WrappedComponent).props().setType(option);      wrapper.find(WrappedComponent).props().getJoke();      await Promise.resolve();      wrapper.update();      const { jokes } = wrapper.find(WrappedComponent).props();      expect(jokes).toEqual(data);    }  );  it('Toggles fav jokes ', async () => {    const wrapper = mount(<EnhancedComponent />);    const id = '1';    const data = { id: '1', value: 'abc' }    apiCall.mockImplementationOnce(() =>      Promise.resolve(        { id: '1', value: 'abc' },      ));    wrapper.find(WrappedComponent).props().getJoke();    await Promise.resolve();    wrapper.update();    wrapper.find(WrappedComponent).props().toggleFav(id);    wrapper.update();    const { favoritedJokes } = wrapper.find(WrappedComponent).props();    expect(favoritedJokes).toEqual({[id]: {...data}});  });  it('Sets chosen category', () => {    const wrapper = mount(<EnhancedComponent />);    wrapper.find(WrappedComponent).props().setCategory('a');    wrapper.update();    const { chosenCategory } = wrapper.find(WrappedComponent).props();    expect(chosenCategory).toEqual('a');  });});